*vim-run.txt* Run, view, and manage UNIX shell commands with ease.

                          _                                 ~
                   _   __(_)___ ___        _______  ______  ~
                  | | / / / __ `__ \______/ ___/ / / / __ \ ~
                  | |/ / / / / / / /_____/ /  / /_/ / / / / ~
                  |___/_/_/ /_/ /_/     /_/   \__,_/_/ /_/  ~

==============================================================================
CONTENTS                                                               *vim-run*

    1. Intro                                                     |vim-run-intro|
    2. Requirements                                       |vim-run-requirements|
    3. Commands                                               |vim-run-commands|
    4. Configuration                                     |vim-run-configuration|
    5. About                                                     |vim-run-about|

==============================================================================
INTRO                                                            *vim-run-intro*

Running external commands with Vim has always been clunky to work with. >
    :!apt update                      (can't edit while running)
    :!apt update &                    (stdout hijacks your screen)
    :!apt update > some/file.log &    (logs available only when done)
<
In most cases, it would be a lot more convenient to just open up a new
terminal (maybe with `:term`, tmux, or a new window in your OS) and run your
command from there.

But what if you don't want to worry about managing several active terminal
sessions? Maybe you'd prefer to just keep one window open - Vim - and run
processes without losing too much screen real estate.

This plugin attempts to solve that problem and provide a more intuitive
experience around running processess asynchronously.

==============================================================================
REQUIREMENTS                                              *vim-run-requirements*

This plugin relies on |channel|s, introduced in Vim 8.0. This is only
partially supported in Neovim because of its different implementation of job
control (for nvim users, see |job-control|).

==============================================================================
COMMANDS                                                      *vim-run-commands*

:Run [<command>]                                                          *:Run*
    Starts a job that runs a <command> in the background with the shell
    provided in |g:run_shell|. If no <command> is provided, a temporary window
    is opened for the user type in their command. The job starts once the
    file is saved and the window is closed.

    The job's timestamp is its <job_key>, which is also its filename prefix
    (see |:RunListToggle|) and the argument for other commands. Job details
    and stdout stream to a buffer, and upon completion may be saved in a file
    under |g:rundir| (automatic if |g:run_autosave_logs| is enabled).

    The job is killed when the user runs |:RunKill|, |:RunKillAll|,
    or leaves Vim.

:RunQuiet [<command>]                                                *:RunQuiet*
    Calls |:Run| <command> but doesn't open the |RunList| when the job starts
    and ends. Enabling |g:run_quiet_default| will cause all |:Run| commands to
    behave this way.

:RunWatch [<command>]                                                *:RunWatch*
    Calls |:Run| <command> and changes the current buffer to the log stream.

:RunSplit [<command>]                                                *:RunSplit*
    Calls |:Run| <command> and opens the log buffer in a window above.

:RunVSplit [<command>]                                               *:RunVSplit*
    Calls |:Run| <command> and opens the log buffer in a window to the right.

:RunNoStream [<command>]                                           *:RunNoStream*
    Calls |:Run| <command> without creating a log buffer. The results only will 
    be written once the command stops. This is ideal for commands that produce
    a large amount of output quickly, which may cause performance issues.

    Enabling |g:run_nostream_default| will cause all |:Run| commands to behave
    this way.

:RunAgain                                                            *:RunAgain*
    Calls the last |:Run| command with its settings (quiet, watch, etc.)

:RunAgainEdit                                                    *:RunAgainEdit*
    Calls |:RunAgain| but opens the last command in a temporary window before
    starting its job (similar to calling |:Run| with no arguments).

:RunSendKeys [<text>]                                             *:RunSendKeys*
    Sends <text> to the job of the currently focused buffer, similar to
    interacting with an input prompt. If no <text> is provided, a temporary
    window is opened for the user to type in the text to send (similar to
    calling |:Run| with no arguments).

    Note that this only works for jobs that are still running, regardless of
    whether or not their logs are being streamed (works for commands run
    with |:RunNoStream|).

:RunKill [<job_key>]                                                  *:RunKill*
    Sends a SIGKILL signal to the job of the currently focused buffer, or to
    the job matching <job_key> if provided.

:RunKillAll                                                        *:RunKillAll*
    Sends a SIGKILL signal to all running jobs.

:RunListToggle                                                  *:RunListToggle*
    Opens or closes the |RunList| - a |quickfix| menu that shows all jobs,
    their status, and their log files. The list is updated every time jobs
    start or stop, and when any |:RunClear| command is called.

    If |g:run_quiet_default| is not enabled or the job is not run with
    |:RunQuiet|, the |RunList| will be opened when the job starts or stops.

:RunClear                                                            *:RunClear*
    Removes all jobs with status DONE / FAILED / KILLED from the |RunList| and
    wipe their associated buffers (see `:bw`). This does not clear any saved
    log files.

:RunClearDone                                                    *:RunClearDone*
    Same as |:RunClear| but only removes jobs with status DONE.

:RunClearFailed                                                *:RunClearFailed*
    Same as |:RunClear| but only removes jobs with status FAILED.

:RunClearKilled                                                *:RunClearKilled*
    Same as |:RunClear| but only removes jobs with status KILLED.

:RunSaveLog [<job_key>]                                            *:RunSaveLog*
    Saves the log file of the currently focused buffer (or <job_key> if
    provided) to |g:rundir| in case the job was run while |g:run_autosave_logs|
    was disabled.

:RunBrowseLogs [<limit>]                                        *:RunBrowseLogs*
    Loads the last <limit> logs (default: |g:run_browse_default_limit|) saved
    in |g:rundir| into the |quickfix| window. Works just like the |RunList|
    but shows your saved history instead of the current session.

:RunDeleteLogs                                                  *:RunDeleteLogs*
    Removes all log files under |g:rundir|.

==============================================================================
CONFIGURATION                                            *vim-run-configuration*

g:rundir                                                              *g:rundir* 
    Where all log files are stored if |g:run_autosave_logs| is enabled (all
    jobs are saved) or |:RunSaveLog| is called. Must be a valid directory path
    which the user has edit access to. If |g:rundir| is defined and valid but
    the directory doesn't exist yet, it will be created automatically. >

        let g:rundir = ~/.vim/rundir           (default)
<
g:run_shell                                                        *g:run_shell*
    The full path of the shell to use when executing any command. Defaults to
    the $SHELL environment variable. >

        let g:run_shell = $SHELL               (default)
<
g:run_quiet_default                                        *g:run_quiet_default*
    If enabled, all |:Run| commands will not open the |RunList| whenever jobs
    start or stop. Note that whenever jobs are updated and the |RunList| is
    open, this causes the editor to focus on the |quickfix| menu which may
    interrupt your editing. >

        let g:run_quiet_default = 0            (default)
<
g:run_autosave_logs                                        *g:run_autosave_logs*
    If enabled, all log files will be saved in |g:rundir| once the job stops.
    Otherwise, logs will only be streamed to the buffers and will be lost once
    the user either deletes the buffer or leaves Vim. >

        let g:run_autosave_logs = 0            (default)
<
g:run_nostream_default                                  *g:run_nostream_default*
    If enabled, all |:Run| commands will not produce a log buffer when jobs
    are started. Output will only be written to the log file in |g:rundir|
    once the job has finished running. Overrides |g:run_autosave_logs|.  >

        let g:run_nostream_default = 0         (default)
<
g:run_browse_default_limit                          *g:run_browse_default_limit*
    The default number of files to show when |:RunBrowseLogs| is called with
    no arguments. >

        let g:run_browse_default_limit = 10    (default)
<
==============================================================================
ABOUT                                                            *vim-run-about*

Grab the latest version, report a bug, or contribute on GitHub:

https://github.com/ledesmablt/vim-run

 vim:tw=78:ts=8:ft=help:norl:
